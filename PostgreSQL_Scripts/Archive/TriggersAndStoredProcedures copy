-- Below Stored will be called by the trigger when staging table receives data.

-- CREATE OR REPLACE PROCEDURE insertinrestauranttable
-- (
-- 	restaurant_name_in VARCHAR(150),
-- 	street_in VARCHAR(256),
--     city_in VARCHAR(80),
--     state_in VARCHAR(10),
-- 	postal_code_in VARCHAR(10),
-- 	latitude_in DECIMAL(10,8),
-- 	longitude_in DECIMAL(11,8),
-- 	stars_in DECIMAL(3,2),
-- 	review_count_in INTEGER
-- )
-- LANGUAGE plpgsql
-- AS $$
-- DECLARE
-- 	id_found INTEGER = NULL;
-- 	addressid INTEGER = NULL;
-- BEGIN
-- 	SELECT address_id
-- 	INTO addressid
-- 	FROM address
-- 	WHERE city = city_in
-- 	AND "state" = state_in;
	
-- -- 	IF addressid IS NULL THEN
-- -- 		RAISE EXCEPTION 'No Address Available';
-- -- 	ELSE
-- 	SELECT 1
-- 	INTO id_found
-- 	FROM restaurants
-- 	WHERE restaurant_name = restaurant_name_in
-- 	AND street = street_in
-- 	AND address_id = addressid
-- 	AND postal_code = postal_code_in
-- 	AND latitude = latitude_in
-- 	AND longitude = longitude_in
-- 	AND stars = stars_in
-- 	AND review_count = review_count_in;

-- 	IF id_found is NULL THEN
-- 		INSERT INTO restaurants (restaurant_name, street, address_id, postal_code, latitude, longitude, stars, review_count)
-- 		VALUES (restaurant_name_in, street_in, addressid, postal_code_in, latitude_in, longitude_in, stars_in, review_count_in);
-- 	END IF;	
-- -- 	END IF;
-- END; $$

-- Below trigger is executed when data is inserted into Staging Table
-- CREATE OR REPLACE FUNCTION insert_into_restaurant_from_staging()
-- 	RETURNS TRIGGER
-- 	LANGUAGE PLPGSQL
-- 	AS
-- $$
-- BEGIN
-- 	CALL public.insertinrestauranttable(NEW.restaurant_name, 
-- 										NEW.street, 
-- 										NEW.city, 
-- 										NEW.state, 
-- 										NEW.postal_code, 
-- 										NEW.latitude,
-- 									    NEW.longitude,
-- 									   	NEW.stars,
-- 									   	NEW.review_count);
-- 	RETURN NEW;
-- END;
-- $$

-- CREATE TRIGGER insert_in_restaurant_from_staging_trigger
-- 	AFTER INSERT
-- 	ON restaurantstaging
-- 	FOR EACH ROW
-- 	EXECUTE PROCEDURE insert_into_restaurant_from_staging();

-- Below Stored will be called after staging table receives data.

CREATE OR REPLACE PROCEDURE insert_restaurant_address_cuisine_table()
	LANGUAGE plpgsql
	AS $$
BEGIN
	INSERT INTO  cuisines (cuisine_name)
		SELECT cuisine_name FROM cuisinesstaging
	ON CONFLICT ON CONSTRAINT cuisines_cuisine_name_key
	DO NOTHING;
	
	INSERT INTO  address (city, "state")
		SELECT city, "state" FROM addressstaging
	ON CONFLICT ON CONSTRAINT address_super_key
	DO NOTHING;
	
	INSERT INTO restaurants (restaurant_name, street, address_id, postal_code, latitude, longitude, stars, review_count)
		SELECT restaurant_name, street, a.address_id, postal_code, latitude, longitude, stars, review_count
		FROM restaurantstaging rs
		JOIN address a ON(rs.city = a.city AND rs.state = a.state )
	ON CONFLICT ON CONSTRAINT restaurant_super_key
	DO NOTHING;
	
	INSERT INTO restaurantcuisine(restaurant_id, cuisine_id)
		SELECT r.restaurant_id, c.cuisine_id
		FROM restaurants r
		JOIN restaurantstaging rs ON(r.restaurant_name = rs.restaurant_name 
									 AND r.street = rs.street
									 AND r.address_id = (select address_id where city = rs.city AND "state" = rs.state)
									 AND r.postal_code = rs.postal_code
									 AND r.latitude = rs.latitude
									 AND r.longitude = rs.longitude
									)
		JOIN cuisines c ON(rs.cuisine_name = c.cuisine_name)
	ON CONFLICT ON CONSTRAINT restaurantcuisine_super_key
	DO NOTHING;
END; $$
-- CALL public.insert_restaurant_address_cuisine_table()

-- Stored Procedure to insert in user table

CREATE OR REPLACE PROCEDURE insert_in_users
(
	userid VARCHAR(40),
	in_city VARCHAR(40),
	in_state VARCHAR(10)
)
	LANGUAGE plpgsql
	AS $$
DECLARE
	addressid INTEGER;
BEGIN
	SELECT address_id
	INTO addressid
	FROM address
	WHERE city = in_city AND state = in_state;
	
	INSERT INTO users (user_id, address_id)
	VALUES (userid, addressid);
END; $$

-- CALL public.insert_in_users('619b19c66bae71363f82de42', 'Boston', 'MA')

select * from users

-- Stored procedure to insert in review table

CREATE OR REPLACE PROCEDURE insert_update_reviews
(
	in_stars INTEGER,
	in_comment TEXT,
	in_userid VARCHAR(40),
	in_restaurantid INTEGER
)
	LANGUAGE plpgsql
	AS $$
DECLARE
	verify_exists VARCHAR(5) = NULL;
	old_stars INTEGER;
BEGIN
	SELECT 'YES' INTO verify_exists FROM reviews
	WHERE user_id = in_userid AND restaurant_id = in_restaurantid;
	
	IF verify_exists is NULL THEN
		INSERT INTO reviews (stars, "comment", user_id, restaurant_id, "date")
		VALUES (in_stars, in_comment, in_userid, in_restaurantid, CURRENT_DATE);
		
		UPDATE restaurants
		SET stars = ((stars * review_count) + in_stars) / (review_count + 1),
			review_count = review_count + 1
		WHERE restaurant_id = in_restaurantid;
		
	ELSE
		SELECT stars INTO old_stars FROM reviews 
		WHERE user_id = in_userid AND restaurant_id = in_restaurantid;
		
		UPDATE reviews
		SET stars = in_stars,
			"comment" = in_comment,
			"date" = CURRENT_DATE
		WHERE user_id = in_userid AND restaurant_id = in_restaurantid;
		
		UPDATE restaurants
		SET stars = ((stars * review_count) - (old_stars - in_stars)) / review_count
		WHERE restaurant_id = in_restaurantid;
	END IF;
END; $$

-- CALL public.insert_update_reviews(5, 'Very good restaurant liked the dumplings.', '619b19c66bae71363f82de42', 61793);

-- select * from reviews;
-- select * from restaurants where restaurant_id = 61793;

-- DELETE from reviews;
-- update restaurants
-- set stars = 5.00
-- where restaurant_id = 61793

-- update restaurants
-- set review_count = 10
-- where restaurant_id = 61793























	

	
	
	
	
	
	